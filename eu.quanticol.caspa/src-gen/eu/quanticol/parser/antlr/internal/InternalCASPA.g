/*
* generated by Xtext
*/
grammar InternalCASPA;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package eu.quanticol.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package eu.quanticol.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import eu.quanticol.services.CASPAGrammarAccess;

}

@parser::members {

 	private CASPAGrammarAccess grammarAccess;
 	
    public InternalCASPAParser(TokenStream input, CASPAGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected CASPAGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getTermsTermParserRuleCall_0_0()); 
	    }
		lv_terms_0_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"terms",
        		lv_terms_0_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getProcessesProcessParserRuleCall_1_0()); 
	    }
		lv_processes_1_0=ruleProcess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		add(
       			$current, 
       			"processes",
        		lv_processes_1_0, 
        		"Process");
	        afterParserOrEnumRuleCall();
	    }

)
)+)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleStore
entryRuleStore returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getStoreRule()); }
	 iv_ruleStore=ruleStore 
	 { $current=$iv_ruleStore.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Store
ruleStore returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getStoreAccess().getStoreAction_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_LOWER
		{
			newLeafNode(lv_name_1_0, grammarAccess.getStoreAccess().getNameLOWERTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getStoreRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"LOWER");
	    }

)
)	otherlv_2='=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getStoreAccess().getEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getStoreAccess().getValueNaturalParserRuleCall_3_0()); 
	    }
		lv_value_3_0=ruleNatural		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStoreRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Natural");
	        afterParserOrEnumRuleCall();
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleReferencedStore
entryRuleReferencedStore returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getReferencedStoreRule()); }
	 iv_ruleReferencedStore=ruleReferencedStore 
	 { $current=$iv_ruleReferencedStore.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ReferencedStore
ruleReferencedStore returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getReferencedStoreAccess().getReferencedStoreAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferencedStoreRule());
	        }
        }
	otherlv_1=RULE_LOWER
	{
		newLeafNode(otherlv_1, grammarAccess.getReferencedStoreAccess().getNameStoreCrossReference_1_0()); 
	}

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSelfReferencedStore
entryRuleSelfReferencedStore returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getSelfReferencedStoreRule()); }
	 iv_ruleSelfReferencedStore=ruleSelfReferencedStore 
	 { $current=$iv_ruleSelfReferencedStore.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SelfReferencedStore
ruleSelfReferencedStore returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSelfReferencedStoreAccess().getSelfReferencedStoreAction_0(),
            $current);
    }
)	otherlv_1='this.' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getSelfReferencedStoreAccess().getThisKeyword_1());
    }
(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getSelfReferencedStoreRule());
	        }
        }
	otherlv_2=RULE_LOWER
	{
		newLeafNode(otherlv_2, grammarAccess.getSelfReferencedStoreAccess().getNameStoreCrossReference_2_0()); 
	}

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleAction
entryRuleAction returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getActionRule()); }
	 iv_ruleAction=ruleAction 
	 { $current=$iv_ruleAction.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Action
ruleAction returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((((
    {
        $current = forceCreateModelElement(
            grammarAccess.getActionAccess().getBroadcastAction_0_0_0(),
            $current);
    }
)(
(
		lv_name_1_0=RULE_LOWER
		{
			newLeafNode(lv_name_1_0, grammarAccess.getActionAccess().getNameLOWERTerminalRuleCall_0_0_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"LOWER");
	    }

)
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getActionAccess().getAsteriskKeyword_0_0_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getActionAccess().getUnicastAction_0_1_0(),
            $current);
    }
)(
(
		lv_name_4_0=RULE_LOWER
		{
			newLeafNode(lv_name_4_0, grammarAccess.getActionAccess().getNameLOWERTerminalRuleCall_0_1_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getActionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_4_0, 
        		"LOWER");
	    }

)
)))(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getPredicatePredicateParserRuleCall_1_0()); 
	    }
		lv_predicate_5_0=rulePredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_5_0, 
        		"Predicate");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getArgumentsArgumentsParserRuleCall_2_0()); 
	    }
		lv_arguments_6_0=ruleArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"arguments",
        		lv_arguments_6_0, 
        		"Arguments");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getActionAccess().getUpdatesUpdatesParserRuleCall_3_0()); 
	    }
		lv_updates_7_0=ruleUpdates		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionRule());
	        }
       		set(
       			$current, 
       			"updates",
        		lv_updates_7_0, 
        		"Updates");
	        afterParserOrEnumRuleCall();
	    }

)
)?	otherlv_8='.' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getActionAccess().getFullStopKeyword_4());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePredicate
entryRulePredicate returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getPredicateRule()); }
	 iv_rulePredicate=rulePredicate 
	 { $current=$iv_rulePredicate.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Predicate
rulePredicate returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPredicateAccess().getPredicateAction_0(),
            $current);
    }
)	otherlv_1='[' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getPredicateAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateAccess().getPredicatePredicateExpressionParserRuleCall_2_0()); 
	    }
		lv_predicate_2_0=rulePredicateExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_2_0, 
        		"PredicateExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=']' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getPredicateAccess().getRightSquareBracketKeyword_3());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePredicateExpression
entryRulePredicateExpression returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getPredicateExpressionRule()); }
	 iv_rulePredicateExpression=rulePredicateExpression 
	 { $current=$iv_rulePredicateExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PredicateExpression
rulePredicateExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getPredicateExpressionAccess().getPredicateOrParserRuleCall()); 
    }
    this_PredicateOr_0=rulePredicateOr
    { 
        $current = $this_PredicateOr_0.current; 
        afterParserOrEnumRuleCall();
    }

;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePredicateOr
entryRulePredicateOr returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getPredicateOrRule()); }
	 iv_rulePredicateOr=rulePredicateOr 
	 { $current=$iv_rulePredicateOr.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PredicateOr
rulePredicateOr returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPredicateOrAccess().getPredicateAndParserRuleCall_0()); 
    }
    this_PredicateAnd_0=rulePredicateAnd
    { 
        $current = $this_PredicateAnd_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPredicateOrAccess().getPredicateOrLeftAction_1_0(),
            $current);
    }
)	otherlv_2='||' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPredicateOrAccess().getVerticalLineVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateOrAccess().getRightPredicateAndParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePredicateAnd		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateOrRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PredicateAnd");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePredicateAnd
entryRulePredicateAnd returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getPredicateAndRule()); }
	 iv_rulePredicateAnd=rulePredicateAnd 
	 { $current=$iv_rulePredicateAnd.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PredicateAnd
rulePredicateAnd returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPredicateAndAccess().getPredicateEqualityParserRuleCall_0()); 
    }
    this_PredicateEquality_0=rulePredicateEquality
    { 
        $current = $this_PredicateEquality_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPredicateAndAccess().getPredicateAndLeftAction_1_0(),
            $current);
    }
)	otherlv_2='&&' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPredicateAndAccess().getAmpersandAmpersandKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateAndAccess().getRightPredicateEqualityParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePredicateEquality		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateAndRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PredicateEquality");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePredicateEquality
entryRulePredicateEquality returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getPredicateEqualityRule()); }
	 iv_rulePredicateEquality=rulePredicateEquality 
	 { $current=$iv_rulePredicateEquality.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PredicateEquality
rulePredicateEquality returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPredicateEqualityAccess().getPredicateComparisonParserRuleCall_0()); 
    }
    this_PredicateComparison_0=rulePredicateComparison
    { 
        $current = $this_PredicateComparison_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPredicateEqualityAccess().getPredicateEqualityLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'==' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getPredicateEqualityAccess().getOpEqualsSignEqualsSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPredicateEqualityRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'!=' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getPredicateEqualityAccess().getOpExclamationMarkEqualsSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPredicateEqualityRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateEqualityAccess().getRightPredicateComparisonParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePredicateComparison		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateEqualityRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PredicateComparison");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePredicateComparison
entryRulePredicateComparison returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getPredicateComparisonRule()); }
	 iv_rulePredicateComparison=rulePredicateComparison 
	 { $current=$iv_rulePredicateComparison.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PredicateComparison
rulePredicateComparison returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPredicateComparisonAccess().getPredicateSubtractionParserRuleCall_0()); 
    }
    this_PredicateSubtraction_0=rulePredicateSubtraction
    { 
        $current = $this_PredicateSubtraction_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPredicateComparisonAccess().getPredicateComparisonLeftAction_1_0(),
            $current);
    }
)(
(
(
		lv_op_2_1=	'>=' 
    {
        newLeafNode(lv_op_2_1, grammarAccess.getPredicateComparisonAccess().getOpGreaterThanSignEqualsSignKeyword_1_1_0_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPredicateComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_1, null);
	    }

    |		lv_op_2_2=	'<=' 
    {
        newLeafNode(lv_op_2_2, grammarAccess.getPredicateComparisonAccess().getOpLessThanSignEqualsSignKeyword_1_1_0_1());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPredicateComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_2, null);
	    }

    |		lv_op_2_3=	'>' 
    {
        newLeafNode(lv_op_2_3, grammarAccess.getPredicateComparisonAccess().getOpGreaterThanSignKeyword_1_1_0_2());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPredicateComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_3, null);
	    }

    |		lv_op_2_4=	'<' 
    {
        newLeafNode(lv_op_2_4, grammarAccess.getPredicateComparisonAccess().getOpLessThanSignKeyword_1_1_0_3());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPredicateComparisonRule());
	        }
       		setWithLastConsumed($current, "op", lv_op_2_4, null);
	    }

)

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateComparisonAccess().getRightPredicateSubtractionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePredicateSubtraction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateComparisonRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PredicateSubtraction");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePredicateSubtraction
entryRulePredicateSubtraction returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getPredicateSubtractionRule()); }
	 iv_rulePredicateSubtraction=rulePredicateSubtraction 
	 { $current=$iv_rulePredicateSubtraction.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PredicateSubtraction
rulePredicateSubtraction returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPredicateSubtractionAccess().getPredicateAdditionParserRuleCall_0()); 
    }
    this_PredicateAddition_0=rulePredicateAddition
    { 
        $current = $this_PredicateAddition_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPredicateSubtractionAccess().getPredicateSubLeftAction_1_0(),
            $current);
    }
)	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPredicateSubtractionAccess().getHyphenMinusKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateSubtractionAccess().getRightPredicateAdditionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePredicateAddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateSubtractionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PredicateAddition");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePredicateAddition
entryRulePredicateAddition returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getPredicateAdditionRule()); }
	 iv_rulePredicateAddition=rulePredicateAddition 
	 { $current=$iv_rulePredicateAddition.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PredicateAddition
rulePredicateAddition returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPredicateAdditionAccess().getPredicateMultiplicationParserRuleCall_0()); 
    }
    this_PredicateMultiplication_0=rulePredicateMultiplication
    { 
        $current = $this_PredicateMultiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPredicateAdditionAccess().getPredicatePluLeftAction_1_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPredicateAdditionAccess().getPlusSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateAdditionAccess().getRightPredicateMultiplicationParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePredicateMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateAdditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PredicateMultiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePredicateMultiplication
entryRulePredicateMultiplication returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getPredicateMultiplicationRule()); }
	 iv_rulePredicateMultiplication=rulePredicateMultiplication 
	 { $current=$iv_rulePredicateMultiplication.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PredicateMultiplication
rulePredicateMultiplication returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPredicateMultiplicationAccess().getPredicateDivisionParserRuleCall_0()); 
    }
    this_PredicateDivision_0=rulePredicateDivision
    { 
        $current = $this_PredicateDivision_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPredicateMultiplicationAccess().getPredicateMulLeftAction_1_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPredicateMultiplicationAccess().getAsteriskKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateMultiplicationAccess().getRightPredicateDivisionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePredicateDivision		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateMultiplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PredicateDivision");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePredicateDivision
entryRulePredicateDivision returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getPredicateDivisionRule()); }
	 iv_rulePredicateDivision=rulePredicateDivision 
	 { $current=$iv_rulePredicateDivision.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PredicateDivision
rulePredicateDivision returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getPredicateDivisionAccess().getPredicatePrimaryParserRuleCall_0()); 
    }
    this_PredicatePrimary_0=rulePredicatePrimary
    { 
        $current = $this_PredicatePrimary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getPredicateDivisionAccess().getPredicateDivLeftAction_1_0(),
            $current);
    }
)	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPredicateDivisionAccess().getSolidusKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateDivisionAccess().getRightPredicatePrimaryParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePredicatePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateDivisionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PredicatePrimary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePredicatePrimary
entryRulePredicatePrimary returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getPredicatePrimaryRule()); }
	 iv_rulePredicatePrimary=rulePredicatePrimary 
	 { $current=$iv_rulePredicatePrimary.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PredicatePrimary
rulePredicatePrimary returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPredicatePrimaryAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getPredicatePrimaryAccess().getPredicateExpressionParserRuleCall_0_1()); 
    }
    this_PredicateExpression_1=rulePredicateExpression
    { 
        $current = $this_PredicateExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPredicatePrimaryAccess().getRightParenthesisKeyword_0_2());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPredicatePrimaryAccess().getPredicateNotAction_1_0(),
            $current);
    }
)	otherlv_4='!' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getPredicatePrimaryAccess().getExclamationMarkKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicatePrimaryAccess().getExpressionPredicatePrimaryParserRuleCall_1_2_0()); 
	    }
		lv_expression_5_0=rulePredicatePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicatePrimaryRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_5_0, 
        		"PredicatePrimary");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getPredicatePrimaryAccess().getPredicateAtomicParserRuleCall_2()); 
    }
    this_PredicateAtomic_6=rulePredicateAtomic
    { 
        $current = $this_PredicateAtomic_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePredicateAtomic
entryRulePredicateAtomic returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getPredicateAtomicRule()); }
	 iv_rulePredicateAtomic=rulePredicateAtomic 
	 { $current=$iv_rulePredicateAtomic.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PredicateAtomic
rulePredicateAtomic returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPredicateAtomicAccess().getConstantAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateAtomicAccess().getValueNaturalParserRuleCall_0_1_0()); 
	    }
		lv_value_1_0=ruleNatural		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateAtomicRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Natural");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPredicateAtomicAccess().getBooleanConstantAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateAtomicAccess().getValueBoolParserRuleCall_1_1_0()); 
	    }
		lv_value_3_0=ruleBool		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateAtomicRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Bool");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getPredicateAtomicAccess().getReferencedStoreParserRuleCall_2()); 
    }
    this_ReferencedStore_4=ruleReferencedStore
    { 
        $current = $this_ReferencedStore_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getPredicateAtomicAccess().getSelfReferencedStoreParserRuleCall_3()); 
    }
    this_SelfReferencedStore_5=ruleSelfReferencedStore
    { 
        $current = $this_SelfReferencedStore_5.current; 
        afterParserOrEnumRuleCall();
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleArguments
entryRuleArguments returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getArgumentsRule()); }
	 iv_ruleArguments=ruleArguments 
	 { $current=$iv_ruleArguments.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Arguments
ruleArguments returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getArgumentsAccess().getLeftParenthesisKeyword_0_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getArgumentsAccess().getInAction_0_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentsAccess().getExpressionsInArgumentsParserRuleCall_0_2_0()); 
	    }
		lv_expressions_2_0=ruleInArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentsRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_2_0, 
        		"InArguments");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=',' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getArgumentsAccess().getCommaKeyword_0_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentsAccess().getExpressionsInArgumentsParserRuleCall_0_3_1_0()); 
	    }
		lv_expressions_4_0=ruleInArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentsRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_4_0, 
        		"InArguments");
	        afterParserOrEnumRuleCall();
	    }

)
)+)*	otherlv_5=')' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getArgumentsAccess().getRightParenthesisKeyword_0_4());
    }
)
    |(	otherlv_6='<' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getArgumentsAccess().getLessThanSignKeyword_1_0());
    }
(
    {
        $current = forceCreateModelElement(
            grammarAccess.getArgumentsAccess().getOutAction_1_1(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentsAccess().getExpressionsOutArgumentsParserRuleCall_1_2_0()); 
	    }
		lv_expressions_8_0=ruleOutArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentsRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_8_0, 
        		"OutArguments");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_9=',' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getArgumentsAccess().getCommaKeyword_1_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArgumentsAccess().getExpressionsOutArgumentsParserRuleCall_1_3_1_0()); 
	    }
		lv_expressions_10_0=ruleOutArguments		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArgumentsRule());
	        }
       		add(
       			$current, 
       			"expressions",
        		lv_expressions_10_0, 
        		"OutArguments");
	        afterParserOrEnumRuleCall();
	    }

)
)+)*	otherlv_11='>' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getArgumentsAccess().getGreaterThanSignKeyword_1_4());
    }
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleInArguments
entryRuleInArguments returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getInArgumentsRule()); }
	 iv_ruleInArguments=ruleInArguments 
	 { $current=$iv_ruleInArguments.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule InArguments
ruleInArguments returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getInArgumentsAccess().getVariablesParserRuleCall()); 
    }
    this_Variables_0=ruleVariables
    { 
        $current = $this_Variables_0.current; 
        afterParserOrEnumRuleCall();
    }

;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleOutArguments
entryRuleOutArguments returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getOutArgumentsRule()); }
	 iv_ruleOutArguments=ruleOutArguments 
	 { $current=$iv_ruleOutArguments.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule OutArguments
ruleOutArguments returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getOutArgumentsAccess().getExpressionsParserRuleCall()); 
    }
    this_Expressions_0=ruleExpressions
    { 
        $current = $this_Expressions_0.current; 
        afterParserOrEnumRuleCall();
    }

;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleExpressions
entryRuleExpressions returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getExpressionsRule()); }
	 iv_ruleExpressions=ruleExpressions 
	 { $current=$iv_ruleExpressions.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Expressions
ruleExpressions returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getExpressionsAccess().getSelfReferencedStoreParserRuleCall_0()); 
    }
    this_SelfReferencedStore_0=ruleSelfReferencedStore
    { 
        $current = $this_SelfReferencedStore_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getExpressionsAccess().getReferencedStoreParserRuleCall_1()); 
    }
    this_ReferencedStore_1=ruleReferencedStore
    { 
        $current = $this_ReferencedStore_1.current; 
        afterParserOrEnumRuleCall();
    }

    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getExpressionsAccess().getConstantAction_2_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getExpressionsAccess().getValueNaturalParserRuleCall_2_1_0()); 
	    }
		lv_value_3_0=ruleNatural		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getExpressionsRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_3_0, 
        		"Natural");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleVariables
entryRuleVariables returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getVariablesRule()); }
	 iv_ruleVariables=ruleVariables 
	 { $current=$iv_ruleVariables.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Variables
ruleVariables returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getVariablesAccess().getSelfReferencedStoreParserRuleCall_0()); 
    }
    this_SelfReferencedStore_0=ruleSelfReferencedStore
    { 
        $current = $this_SelfReferencedStore_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getVariablesAccess().getReferencedStoreParserRuleCall_1()); 
    }
    this_ReferencedStore_1=ruleReferencedStore
    { 
        $current = $this_ReferencedStore_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleUpdates
entryRuleUpdates returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getUpdatesRule()); }
	 iv_ruleUpdates=ruleUpdates 
	 { $current=$iv_ruleUpdates.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Updates
ruleUpdates returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUpdatesAccess().getUpdatesAction_0(),
            $current);
    }
)	otherlv_1='{' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getUpdatesAccess().getLeftCurlyBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdatesAccess().getUpdatesUpdateParserRuleCall_2_0()); 
	    }
		lv_updates_2_0=ruleUpdate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdatesRule());
	        }
       		add(
       			$current, 
       			"updates",
        		lv_updates_2_0, 
        		"Update");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getUpdatesAccess().getSemicolonKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdatesAccess().getUpdatesUpdateParserRuleCall_3_1_0()); 
	    }
		lv_updates_4_0=ruleUpdate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdatesRule());
	        }
       		add(
       			$current, 
       			"updates",
        		lv_updates_4_0, 
        		"Update");
	        afterParserOrEnumRuleCall();
	    }

)
)+)*	otherlv_5='}' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getUpdatesAccess().getRightCurlyBracketKeyword_4());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleUpdate
entryRuleUpdate returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getUpdateRule()); }
	 iv_ruleUpdate=ruleUpdate 
	 { $current=$iv_ruleUpdate.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Update
ruleUpdate returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUpdateAccess().getDistributedEventUpdateParserRuleCall_0()); 
    }
    this_DistributedEventUpdate_0=ruleDistributedEventUpdate
    { 
        $current = $this_DistributedEventUpdate_0.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUpdateAccess().getSingleEventUpdateParserRuleCall_1()); 
    }
    this_SingleEventUpdate_1=ruleSingleEventUpdate
    { 
        $current = $this_SingleEventUpdate_1.current; 
        afterParserOrEnumRuleCall();
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleSingleEventUpdate
entryRuleSingleEventUpdate returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getSingleEventUpdateRule()); }
	 iv_ruleSingleEventUpdate=ruleSingleEventUpdate 
	 { $current=$iv_ruleSingleEventUpdate.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule SingleEventUpdate
ruleSingleEventUpdate returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getSingleEventUpdateAccess().getLocalSingleEventUpdateAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleEventUpdateAccess().getNameSelfReferencedStoreParserRuleCall_1_0()); 
	    }
		lv_name_1_0=ruleSelfReferencedStore		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleEventUpdateRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"SelfReferencedStore");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getSingleEventUpdateAccess().getColonEqualsSignKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getSingleEventUpdateAccess().getExpressionUpdateExpressionParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleUpdateExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSingleEventUpdateRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"UpdateExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleDistributedEventUpdate
entryRuleDistributedEventUpdate returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getDistributedEventUpdateRule()); }
	 iv_ruleDistributedEventUpdate=ruleDistributedEventUpdate 
	 { $current=$iv_ruleDistributedEventUpdate.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule DistributedEventUpdate
ruleDistributedEventUpdate returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDistributedEventUpdateAccess().getDistributedEventUpdateProbabilityAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDistributedEventUpdateAccess().getNameSelfReferencedStoreParserRuleCall_0_1_0()); 
	    }
		lv_name_1_0=ruleSelfReferencedStore		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDistributedEventUpdateRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_1_0, 
        		"SelfReferencedStore");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':=' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDistributedEventUpdateAccess().getColonEqualsSignKeyword_0_2());
    }
	otherlv_3='Pr' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getDistributedEventUpdateAccess().getPrKeyword_0_3());
    }
	otherlv_4='(' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDistributedEventUpdateAccess().getLeftParenthesisKeyword_0_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDistributedEventUpdateAccess().getDistributionDistributionParserRuleCall_0_5_0()); 
	    }
		lv_distribution_5_0=ruleDistribution		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDistributedEventUpdateRule());
	        }
       		add(
       			$current, 
       			"distribution",
        		lv_distribution_5_0, 
        		"Distribution");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_6=',' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDistributedEventUpdateAccess().getCommaKeyword_0_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDistributedEventUpdateAccess().getDistributionDistributionParserRuleCall_0_6_1_0()); 
	    }
		lv_distribution_7_0=ruleDistribution		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDistributedEventUpdateRule());
	        }
       		add(
       			$current, 
       			"distribution",
        		lv_distribution_7_0, 
        		"Distribution");
	        afterParserOrEnumRuleCall();
	    }

)
)+)*	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getDistributedEventUpdateAccess().getRightParenthesisKeyword_0_7());
    }
)
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDistributedEventUpdateAccess().getDistributedEventUpdateUniformAction_1_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDistributedEventUpdateAccess().getNameSelfReferencedStoreParserRuleCall_1_1_0()); 
	    }
		lv_name_10_0=ruleSelfReferencedStore		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDistributedEventUpdateRule());
	        }
       		set(
       			$current, 
       			"name",
        		lv_name_10_0, 
        		"SelfReferencedStore");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_11=':=' 
    {
    	newLeafNode(otherlv_11, grammarAccess.getDistributedEventUpdateAccess().getColonEqualsSignKeyword_1_2());
    }
	otherlv_12='U' 
    {
    	newLeafNode(otherlv_12, grammarAccess.getDistributedEventUpdateAccess().getUKeyword_1_3());
    }
	otherlv_13='(' 
    {
    	newLeafNode(otherlv_13, grammarAccess.getDistributedEventUpdateAccess().getLeftParenthesisKeyword_1_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDistributedEventUpdateAccess().getDistributionUniformParserRuleCall_1_5_0()); 
	    }
		lv_distribution_14_0=ruleUniform		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDistributedEventUpdateRule());
	        }
       		add(
       			$current, 
       			"distribution",
        		lv_distribution_14_0, 
        		"Uniform");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_15=',' 
    {
    	newLeafNode(otherlv_15, grammarAccess.getDistributedEventUpdateAccess().getCommaKeyword_1_6_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDistributedEventUpdateAccess().getDistributionUniformParserRuleCall_1_6_1_0()); 
	    }
		lv_distribution_16_0=ruleUniform		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDistributedEventUpdateRule());
	        }
       		add(
       			$current, 
       			"distribution",
        		lv_distribution_16_0, 
        		"Uniform");
	        afterParserOrEnumRuleCall();
	    }

)
)+)*	otherlv_17=')' 
    {
    	newLeafNode(otherlv_17, grammarAccess.getDistributedEventUpdateAccess().getRightParenthesisKeyword_1_7());
    }
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleDistribution
entryRuleDistribution returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getDistributionRule()); }
	 iv_ruleDistribution=ruleDistribution 
	 { $current=$iv_ruleDistribution.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Distribution
ruleDistribution returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getDistributionAccess().getDistributionAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getDistributionAccess().getProbDoubleParserRuleCall_1_0()); 
	    }
		lv_prob_1_0=ruleDouble		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDistributionRule());
	        }
       		set(
       			$current, 
       			"prob",
        		lv_prob_1_0, 
        		"Double");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDistributionAccess().getColonKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDistributionAccess().getExpressionNaturalParserRuleCall_3_0()); 
	    }
		lv_expression_3_0=ruleNatural		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDistributionRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_3_0, 
        		"Natural");
	        afterParserOrEnumRuleCall();
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleUniform
entryRuleUniform returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getUniformRule()); }
	 iv_ruleUniform=ruleUniform 
	 { $current=$iv_ruleUniform.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Uniform
ruleUniform returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUniformAccess().getUniformAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUniformAccess().getExpressionNaturalParserRuleCall_1_0()); 
	    }
		lv_expression_1_0=ruleNatural		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUniformRule());
	        }
       		set(
       			$current, 
       			"expression",
        		lv_expression_1_0, 
        		"Natural");
	        afterParserOrEnumRuleCall();
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleUpdateExpression
entryRuleUpdateExpression returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getUpdateExpressionRule()); }
	 iv_ruleUpdateExpression=ruleUpdateExpression 
	 { $current=$iv_ruleUpdateExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule UpdateExpression
ruleUpdateExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getUpdateExpressionAccess().getUpdateSubtractionParserRuleCall()); 
    }
    this_UpdateSubtraction_0=ruleUpdateSubtraction
    { 
        $current = $this_UpdateSubtraction_0.current; 
        afterParserOrEnumRuleCall();
    }

;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleUpdateSubtraction
entryRuleUpdateSubtraction returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getUpdateSubtractionRule()); }
	 iv_ruleUpdateSubtraction=ruleUpdateSubtraction 
	 { $current=$iv_ruleUpdateSubtraction.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule UpdateSubtraction
ruleUpdateSubtraction returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUpdateSubtractionAccess().getUpdateAdditionParserRuleCall_0()); 
    }
    this_UpdateAddition_0=ruleUpdateAddition
    { 
        $current = $this_UpdateAddition_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getUpdateSubtractionAccess().getUpdateSubLeftAction_1_0(),
            $current);
    }
)	otherlv_2='-' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUpdateSubtractionAccess().getHyphenMinusKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateSubtractionAccess().getRightUpdateAdditionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleUpdateAddition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateSubtractionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"UpdateAddition");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleUpdateAddition
entryRuleUpdateAddition returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getUpdateAdditionRule()); }
	 iv_ruleUpdateAddition=ruleUpdateAddition 
	 { $current=$iv_ruleUpdateAddition.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule UpdateAddition
ruleUpdateAddition returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUpdateAdditionAccess().getUpdateMultiplicationParserRuleCall_0()); 
    }
    this_UpdateMultiplication_0=ruleUpdateMultiplication
    { 
        $current = $this_UpdateMultiplication_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getUpdateAdditionAccess().getUpdatePluLeftAction_1_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUpdateAdditionAccess().getPlusSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateAdditionAccess().getRightUpdateMultiplicationParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleUpdateMultiplication		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateAdditionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"UpdateMultiplication");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleUpdateMultiplication
entryRuleUpdateMultiplication returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getUpdateMultiplicationRule()); }
	 iv_ruleUpdateMultiplication=ruleUpdateMultiplication 
	 { $current=$iv_ruleUpdateMultiplication.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule UpdateMultiplication
ruleUpdateMultiplication returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUpdateMultiplicationAccess().getUpdateDivisionParserRuleCall_0()); 
    }
    this_UpdateDivision_0=ruleUpdateDivision
    { 
        $current = $this_UpdateDivision_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getUpdateMultiplicationAccess().getUpdateMulLeftAction_1_0(),
            $current);
    }
)	otherlv_2='*' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUpdateMultiplicationAccess().getAsteriskKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateMultiplicationAccess().getRightUpdateDivisionParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleUpdateDivision		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateMultiplicationRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"UpdateDivision");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleUpdateDivision
entryRuleUpdateDivision returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getUpdateDivisionRule()); }
	 iv_ruleUpdateDivision=ruleUpdateDivision 
	 { $current=$iv_ruleUpdateDivision.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule UpdateDivision
ruleUpdateDivision returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getUpdateDivisionAccess().getUpdatePrimaryParserRuleCall_0()); 
    }
    this_UpdatePrimary_0=ruleUpdatePrimary
    { 
        $current = $this_UpdatePrimary_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getUpdateDivisionAccess().getUpdateDivLeftAction_1_0(),
            $current);
    }
)	otherlv_2='/' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUpdateDivisionAccess().getSolidusKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateDivisionAccess().getRightUpdatePrimaryParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleUpdatePrimary		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateDivisionRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"UpdatePrimary");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleUpdatePrimary
entryRuleUpdatePrimary returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getUpdatePrimaryRule()); }
	 iv_ruleUpdatePrimary=ruleUpdatePrimary 
	 { $current=$iv_ruleUpdatePrimary.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule UpdatePrimary
ruleUpdatePrimary returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getUpdatePrimaryAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getUpdatePrimaryAccess().getUpdateExpressionParserRuleCall_0_1()); 
    }
    this_UpdateExpression_1=ruleUpdateExpression
    { 
        $current = $this_UpdateExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getUpdatePrimaryAccess().getRightParenthesisKeyword_0_2());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getUpdatePrimaryAccess().getUpdateAtomicParserRuleCall_1()); 
    }
    this_UpdateAtomic_3=ruleUpdateAtomic
    { 
        $current = $this_UpdateAtomic_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleUpdateAtomic
entryRuleUpdateAtomic returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getUpdateAtomicRule()); }
	 iv_ruleUpdateAtomic=ruleUpdateAtomic 
	 { $current=$iv_ruleUpdateAtomic.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule UpdateAtomic
ruleUpdateAtomic returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getUpdateAtomicAccess().getConstantAction_0_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getUpdateAtomicAccess().getValueNaturalParserRuleCall_0_1_0()); 
	    }
		lv_value_1_0=ruleNatural		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getUpdateAtomicRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"Natural");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getUpdateAtomicAccess().getReferencedStoreParserRuleCall_1()); 
    }
    this_ReferencedStore_2=ruleReferencedStore
    { 
        $current = $this_ReferencedStore_2.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getUpdateAtomicAccess().getSelfReferencedStoreParserRuleCall_2()); 
    }
    this_SelfReferencedStore_3=ruleSelfReferencedStore
    { 
        $current = $this_SelfReferencedStore_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleProcess
entryRuleProcess returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getProcessRule()); }
	 iv_ruleProcess=ruleProcess 
	 { $current=$iv_ruleProcess.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Process
ruleProcess returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_UPPER
		{
			newLeafNode(lv_name_0_0, grammarAccess.getProcessAccess().getNameUPPERTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getProcessRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"UPPER");
	    }

)
)	otherlv_1='=' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getProcessAccess().getEqualsSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getProcessAccess().getValueProcessExpressionParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleProcessExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getProcessRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"ProcessExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_3=';' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getProcessAccess().getSemicolonKeyword_3());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleProcessExpression
entryRuleProcessExpression returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getProcessExpressionRule()); }
	 iv_ruleProcessExpression=ruleProcessExpression 
	 { $current=$iv_ruleProcessExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ProcessExpression
ruleProcessExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getProcessExpressionAccess().getParallelParserRuleCall()); 
    }
    this_Parallel_0=ruleParallel
    { 
        $current = $this_Parallel_0.current; 
        afterParserOrEnumRuleCall();
    }

;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleParallel
entryRuleParallel returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getParallelRule()); }
	 iv_ruleParallel=ruleParallel 
	 { $current=$iv_ruleParallel.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Parallel
ruleParallel returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getParallelAccess().getChoiceParserRuleCall_0()); 
    }
    this_Choice_0=ruleChoice
    { 
        $current = $this_Choice_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getParallelAccess().getParallelLeftAction_1_0(),
            $current);
    }
)	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getParallelAccess().getVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getParallelAccess().getRightChoiceParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleChoice		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getParallelRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"Choice");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleChoice
entryRuleChoice returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getChoiceRule()); }
	 iv_ruleChoice=ruleChoice 
	 { $current=$iv_ruleChoice.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Choice
ruleChoice returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getChoiceAccess().getPrimaryProcessParserRuleCall_0()); 
    }
    this_PrimaryProcess_0=rulePrimaryProcess
    { 
        $current = $this_PrimaryProcess_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getChoiceAccess().getChoiceLeftAction_1_0(),
            $current);
    }
)	otherlv_2='+' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getChoiceAccess().getPlusSignKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getChoiceAccess().getRightPrimaryProcessParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=rulePrimaryProcess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getChoiceRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"PrimaryProcess");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePrimaryProcess
entryRulePrimaryProcess returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getPrimaryProcessRule()); }
	 iv_rulePrimaryProcess=rulePrimaryProcess 
	 { $current=$iv_rulePrimaryProcess.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PrimaryProcess
rulePrimaryProcess returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getPrimaryProcessAccess().getLeftParenthesisKeyword_0_0());
    }

    { 
        newCompositeNode(grammarAccess.getPrimaryProcessAccess().getProcessExpressionParserRuleCall_0_1()); 
    }
    this_ProcessExpression_1=ruleProcessExpression
    { 
        $current = $this_ProcessExpression_1.current; 
        afterParserOrEnumRuleCall();
    }
	otherlv_2=')' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getPrimaryProcessAccess().getRightParenthesisKeyword_0_2());
    }
)
    |
    { 
        newCompositeNode(grammarAccess.getPrimaryProcessAccess().getAtomicProcessParserRuleCall_1()); 
    }
    this_AtomicProcess_3=ruleAtomicProcess
    { 
        $current = $this_AtomicProcess_3.current; 
        afterParserOrEnumRuleCall();
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleAtomicProcess
entryRuleAtomicProcess returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getAtomicProcessRule()); }
	 iv_ruleAtomicProcess=ruleAtomicProcess 
	 { $current=$iv_ruleAtomicProcess.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule AtomicProcess
ruleAtomicProcess returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicProcessAccess().getLeafAction_0_0(),
            $current);
    }
)(
(
		lv_value_1_0=	'nil' 
    {
        newLeafNode(lv_value_1_0, grammarAccess.getAtomicProcessAccess().getValueNilKeyword_0_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicProcessRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_1_0, "nil");
	    }

)
))
    |((
    {
        $current = forceCreateModelElement(
            grammarAccess.getAtomicProcessAccess().getLeafAction_1_0(),
            $current);
    }
)(
(
		lv_value_3_0=	'kill' 
    {
        newLeafNode(lv_value_3_0, grammarAccess.getAtomicProcessAccess().getValueKillKeyword_1_1_0());
    }
 
	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getAtomicProcessRule());
	        }
       		setWithLastConsumed($current, "value", lv_value_3_0, "kill");
	    }

)
))
    |
    { 
        newCompositeNode(grammarAccess.getAtomicProcessAccess().getPredicateProcessParserRuleCall_2()); 
    }
    this_PredicateProcess_4=rulePredicateProcess
    { 
        $current = $this_PredicateProcess_4.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtomicProcessAccess().getActionProcessParserRuleCall_3()); 
    }
    this_ActionProcess_5=ruleActionProcess
    { 
        $current = $this_ActionProcess_5.current; 
        afterParserOrEnumRuleCall();
    }

    |
    { 
        newCompositeNode(grammarAccess.getAtomicProcessAccess().getReferencedProcessParserRuleCall_4()); 
    }
    this_ReferencedProcess_6=ruleReferencedProcess
    { 
        $current = $this_ReferencedProcess_6.current; 
        afterParserOrEnumRuleCall();
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRulePredicateProcess
entryRulePredicateProcess returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getPredicateProcessRule()); }
	 iv_rulePredicateProcess=rulePredicateProcess 
	 { $current=$iv_rulePredicateProcess.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule PredicateProcess
rulePredicateProcess returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getPredicateProcessAccess().getPredicateProcessAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateProcessAccess().getPredicatePredicateParserRuleCall_1_0()); 
	    }
		lv_predicate_1_0=rulePredicate		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateProcessRule());
	        }
       		set(
       			$current, 
       			"predicate",
        		lv_predicate_1_0, 
        		"Predicate");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getPredicateProcessAccess().getRefPrimaryProcessParserRuleCall_2_0()); 
	    }
		lv_ref_2_0=rulePrimaryProcess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPredicateProcessRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_2_0, 
        		"PrimaryProcess");
	        afterParserOrEnumRuleCall();
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleActionProcess
entryRuleActionProcess returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getActionProcessRule()); }
	 iv_ruleActionProcess=ruleActionProcess 
	 { $current=$iv_ruleActionProcess.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ActionProcess
ruleActionProcess returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getActionProcessAccess().getActionProcessAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getActionProcessAccess().getActionActionParserRuleCall_1_0()); 
	    }
		lv_action_1_0=ruleAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionProcessRule());
	        }
       		set(
       			$current, 
       			"action",
        		lv_action_1_0, 
        		"Action");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getActionProcessAccess().getRefPrimaryProcessParserRuleCall_2_0()); 
	    }
		lv_ref_2_0=rulePrimaryProcess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getActionProcessRule());
	        }
       		set(
       			$current, 
       			"ref",
        		lv_ref_2_0, 
        		"PrimaryProcess");
	        afterParserOrEnumRuleCall();
	    }

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleReferencedProcess
entryRuleReferencedProcess returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getReferencedProcessRule()); }
	 iv_ruleReferencedProcess=ruleReferencedProcess 
	 { $current=$iv_ruleReferencedProcess.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule ReferencedProcess
ruleReferencedProcess returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getReferencedProcessAccess().getReferencedProcessAction_0(),
            $current);
    }
)(
(
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getReferencedProcessRule());
	        }
        }
	otherlv_1=RULE_UPPER
	{
		newLeafNode(otherlv_1, grammarAccess.getReferencedProcessAccess().getNameProcessCrossReference_1_0()); 
	}

)
))
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(	otherlv_0='(' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getTermAccess().getLeftParenthesisKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getProcessesTermProcessExpressionParserRuleCall_1_0()); 
	    }
		lv_processes_1_0=ruleTermProcessExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		add(
       			$current, 
       			"processes",
        		lv_processes_1_0, 
        		"TermProcessExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)+	otherlv_2=',' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTermAccess().getCommaKeyword_2());
    }
	otherlv_3='{' 
    {
    	newLeafNode(otherlv_3, grammarAccess.getTermAccess().getLeftCurlyBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getStoresStoreParserRuleCall_4_0()); 
	    }
		lv_stores_4_0=ruleStore		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		add(
       			$current, 
       			"stores",
        		lv_stores_4_0, 
        		"Store");
	        afterParserOrEnumRuleCall();
	    }

)
)(	otherlv_5=',' 
    {
    	newLeafNode(otherlv_5, grammarAccess.getTermAccess().getCommaKeyword_5_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getStoresStoreParserRuleCall_5_1_0()); 
	    }
		lv_stores_6_0=ruleStore		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		add(
       			$current, 
       			"stores",
        		lv_stores_6_0, 
        		"Store");
	        afterParserOrEnumRuleCall();
	    }

)
)+)*	otherlv_7='}' 
    {
    	newLeafNode(otherlv_7, grammarAccess.getTermAccess().getRightCurlyBracketKeyword_6());
    }
	otherlv_8=')' 
    {
    	newLeafNode(otherlv_8, grammarAccess.getTermAccess().getRightParenthesisKeyword_7());
    }
	otherlv_9=';' 
    {
    	newLeafNode(otherlv_9, grammarAccess.getTermAccess().getSemicolonKeyword_8());
    }
)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleTermProcessExpression
entryRuleTermProcessExpression returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getTermProcessExpressionRule()); }
	 iv_ruleTermProcessExpression=ruleTermProcessExpression 
	 { $current=$iv_ruleTermProcessExpression.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TermProcessExpression
ruleTermProcessExpression returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:

    { 
        newCompositeNode(grammarAccess.getTermProcessExpressionAccess().getTermProcessParallelParserRuleCall()); 
    }
    this_TermProcessParallel_0=ruleTermProcessParallel
    { 
        $current = $this_TermProcessParallel_0.current; 
        afterParserOrEnumRuleCall();
    }

;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleTermProcessParallel
entryRuleTermProcessParallel returns [EObject current=null] 
	@init { 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
	}
	:
	{ newCompositeNode(grammarAccess.getTermProcessParallelRule()); }
	 iv_ruleTermProcessParallel=ruleTermProcessParallel 
	 { $current=$iv_ruleTermProcessParallel.current; } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule TermProcessParallel
ruleTermProcessParallel returns [EObject current=null] 
    @init { enterRule(); 
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens("RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_WS");
    }
    @after { leaveRule(); }:
(
    { 
        newCompositeNode(grammarAccess.getTermProcessParallelAccess().getReferencedProcessParserRuleCall_0()); 
    }
    this_ReferencedProcess_0=ruleReferencedProcess
    { 
        $current = $this_ReferencedProcess_0.current; 
        afterParserOrEnumRuleCall();
    }
((
    {
        $current = forceCreateModelElementAndSet(
            grammarAccess.getTermProcessParallelAccess().getTPParallelLeftAction_1_0(),
            $current);
    }
)	otherlv_2='|' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getTermProcessParallelAccess().getVerticalLineKeyword_1_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTermProcessParallelAccess().getRightReferencedProcessParserRuleCall_1_2_0()); 
	    }
		lv_right_3_0=ruleReferencedProcess		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermProcessParallelRule());
	        }
       		set(
       			$current, 
       			"right",
        		lv_right_3_0, 
        		"ReferencedProcess");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;
finally {
	myHiddenTokenState.restore();
}





// Entry rule entryRuleDouble
entryRuleDouble returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getDoubleRule()); } 
	 iv_ruleDouble=ruleDouble 
	 { $current=$iv_ruleDouble.current.getText(); }  
	 EOF 
;

// Rule Double
ruleDouble returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_0()); 
    }
(
	kw='.' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleAccess().getFullStopKeyword_1_0()); 
    }
    this_INT_2=RULE_INT    {
		$current.merge(this_INT_2);
    }

    { 
    newLeafNode(this_INT_2, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_1_1()); 
    }
(
	kw='e' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleAccess().getEKeyword_1_2_0()); 
    }

    |(
	kw='E' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleAccess().getEKeyword_1_2_1_0()); 
    }
(
	kw='-' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getDoubleAccess().getHyphenMinusKeyword_1_2_1_1()); 
    }
)?    this_INT_6=RULE_INT    {
		$current.merge(this_INT_6);
    }

    { 
    newLeafNode(this_INT_6, grammarAccess.getDoubleAccess().getINTTerminalRuleCall_1_2_1_2()); 
    }
))?)?)
    ;





// Entry rule entryRuleNatural
entryRuleNatural returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getNaturalRule()); } 
	 iv_ruleNatural=ruleNatural 
	 { $current=$iv_ruleNatural.current.getText(); }  
	 EOF 
;

// Rule Natural
ruleNatural returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getNaturalAccess().getINTTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleBool
entryRuleBool returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getBoolRule()); }
	 iv_ruleBool=ruleBool 
	 { $current=$iv_ruleBool.current; } 
	 EOF 
;

// Rule Bool
ruleBool returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
    {
        $current = forceCreateModelElement(
            grammarAccess.getBoolAccess().getBooleanConstantAction_0(),
            $current);
    }
)(	otherlv_1='True' 
    {
    	newLeafNode(otherlv_1, grammarAccess.getBoolAccess().getTrueKeyword_1_0());
    }

    |	otherlv_2='False' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getBoolAccess().getFalseKeyword_1_1());
    }
))
;





RULE_LOWER : 'a'..'z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_UPPER : 'A'..'Z' ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


