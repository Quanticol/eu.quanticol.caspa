grammar eu.quanticol.CASPA with org.eclipse.xtext.common.Terminals

generate cASPA "http://www.quanticol.eu/CASPA"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

Model hidden(ML_COMMENT,SL_COMMENT,WS):
	terms+=Term+ 
	processes+=Process+ 
;

//STORE
Store returns StoreExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{Store} name=LOWER "=" value=Natural
;

ReferencedStore returns StoreExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{ReferencedStore} name=[Store|LOWER]
;

SelfReferencedStore returns StoreExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{SelfReferencedStore}   "this."name=[Store|LOWER]
;

/**  Old Store expressions
StoreExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	StoreOr ";"
;
	
StoreOr returns StoreExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	StoreAnd ({StoreOr.left=current} "||" 
		right=StoreAnd
	)*
;

StoreAnd returns StoreExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	StoreEquality ({StoreAnd.left=current} "&&" 
		right=StoreEquality
	)*
;

StoreEquality returns StoreExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	StoreComparison (
		{StoreEquality.left=current} op=("=="|"!=")
		right=StoreComparison
	)*
;

StoreComparison returns StoreExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	StoreSubtraction ({StoreComparison.left=current} op=(">="|"<="|">"|"<") 
		right=StoreSubtraction
	)*
;
	
StoreSubtraction returns StoreExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	StoreAddition ({StoreSub.left=current} '-' 
		right=StoreAddition
	)*
;
	
StoreAddition returns StoreExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	StoreMultiplication ({StorePlu.left=current} '+' 
		right=StoreMultiplication
	)*
;

StoreMultiplication returns StoreExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	StoreDivision ({StoreMul.left=current} '*' 
		right=StoreDivision
	)*
;
	
StoreDivision returns StoreExpression hidden(ML_COMMENT,SL_COMMENT,WS): 
	StorePrimary ({StoreDiv.left=current} '/' 
		right=StorePrimary
	)*
;

StorePrimary returns StoreExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	'(' StoreExpression ')' | 
	{StoreNot} "!" expression=StorePrimary |
	StoreAtomic
;

StoreAtomic returns StoreExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{DoubleConstant} 	value=Double |
	{BoolConstant} 		value=('true'|'false') |
	ReferencedStore
;
 **/

//ACTIONS
Action hidden(ML_COMMENT,SL_COMMENT,WS):
	({Broadcast} name=LOWER "*" | {Unicast} name=LOWER) predicate=Predicate arguments=Arguments (updates=Updates)? "." 
	
;

//PREDICATE
Predicate hidden(ML_COMMENT,SL_COMMENT,WS) :
	{Predicate} "[" predicate=PredicateExpression "]"
;

PredicateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	PredicateOr
;
	
PredicateOr returns PredicateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	PredicateAnd ({PredicateOr.left=current} "||" 
		right=PredicateAnd
	)*
;

PredicateAnd returns PredicateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	PredicateEquality ({PredicateAnd.left=current} "&&" 
		right=PredicateEquality
	)*
;

PredicateEquality returns PredicateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	PredicateComparison (
		{PredicateEquality.left=current} op=("=="|"!=")
		right=PredicateComparison
	)*
;

PredicateComparison returns PredicateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	PredicateSubtraction ({PredicateComparison.left=current} op=(">="|"<="|">"|"<") 
		right=PredicateSubtraction
	)*
;
	
PredicateSubtraction returns PredicateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	PredicateAddition ({PredicateSub.left=current} '-' 
		right=PredicateAddition
	)*
;
	
PredicateAddition returns PredicateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	PredicateMultiplication ({PredicatePlu.left=current} '+' 
		right=PredicateMultiplication
	)*
;

PredicateMultiplication returns PredicateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	PredicateDivision ({PredicateMul.left=current} '*' 
		right=PredicateDivision
	)*
;
	
PredicateDivision returns PredicateExpression hidden(ML_COMMENT,SL_COMMENT,WS): 
	PredicatePrimary ({PredicateDiv.left=current} '/' 
		right=PredicatePrimary
	)*
;

PredicatePrimary returns PredicateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	'(' PredicateExpression ')' | 
	{PredicateNot} "!" expression=PredicatePrimary |
	PredicateAtomic
;

PredicateAtomic returns PredicateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{Constant} 	value=Natural |
	{BooleanConstant} value=Bool |
	ReferencedStore |
	SelfReferencedStore
;

//ARGUMENTS
Arguments returns Arguments hidden(ML_COMMENT,SL_COMMENT,WS):
	 ("(" {In} expressions+=InArguments ( "," expressions+=InArguments+)* ")" | 
	 "<" {Out} expressions+=OutArguments ( "," expressions+=OutArguments+)* ">")
;

InArguments returns Arguments hidden(ML_COMMENT,SL_COMMENT,WS):
	Variables
;

OutArguments returns Arguments hidden(ML_COMMENT,SL_COMMENT,WS):
	Expressions
;

Expressions returns Arguments hidden(ML_COMMENT,SL_COMMENT,WS):
	SelfReferencedStore | 
	ReferencedStore |
	{Constant} 	value=Natural
;

Variables returns Arguments hidden(ML_COMMENT,SL_COMMENT,WS):
	SelfReferencedStore | 
	ReferencedStore |
	{Constant} 	value=Natural
;

//UPDATES
Updates returns Updates hidden(ML_COMMENT,SL_COMMENT,WS):
	{Updates} "{" updates+=Update ( ";" updates+=Update+)* "}"
;


Update returns Updates hidden(ML_COMMENT,SL_COMMENT,WS):
	DistributedEventUpdate | 
	SingleEventUpdate
;

SingleEventUpdate returns Updates hidden(ML_COMMENT,SL_COMMENT,WS):
	{LocalSingleEventUpdate} name=SelfReferencedStore ":=" expression=UpdateExpression
;

DistributedEventUpdate returns Updates hidden(ML_COMMENT,SL_COMMENT,WS):
	{DistributedEventUpdateProbability} name=SelfReferencedStore ":=" "Pr" "(" distribution+=Distribution ( "," distribution+=Distribution+)* ")" |
	{DistributedEventUpdateUniform} name=SelfReferencedStore ":=" "U" "(" distribution+=Uniform ( "," distribution+=Uniform+)* ")"
;

Distribution returns Updates hidden(ML_COMMENT,SL_COMMENT,WS):
	{Distribution} prob=Double ":" expression=Natural
;

Uniform returns Updates hidden(ML_COMMENT,SL_COMMENT,WS):
	{Uniform} expression=Natural
;

UpdateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	UpdateSubtraction
;	

UpdateSubtraction returns UpdateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	UpdateAddition ({UpdateSub.left=current} '-' 
		right=UpdateAddition
	)*
;
	
UpdateAddition returns UpdateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	UpdateMultiplication ({UpdatePlu.left=current} '+' 
		right=UpdateMultiplication
	)*
;

UpdateMultiplication returns UpdateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	UpdateDivision ({UpdateMul.left=current} '*' 
		right=UpdateDivision
	)*
;
	
UpdateDivision returns UpdateExpression hidden(ML_COMMENT,SL_COMMENT,WS): 
	UpdatePrimary ({UpdateDiv.left=current} '/' 
		right=UpdatePrimary
	)*
;

UpdatePrimary returns UpdateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	'(' UpdateExpression ')' | 
	UpdateAtomic
;

UpdateAtomic returns UpdateExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{Constant} 	value=Natural |
	ReferencedStore |
	SelfReferencedStore
;


//PROCESSES
Process hidden(ML_COMMENT,SL_COMMENT,WS):
	name=UPPER "=" value=ProcessExpression ";"
;

ProcessExpression returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	Parallel
;

Parallel returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	Choice ({Parallel.left=current}  "|" right=Choice)*
;

Choice returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	PrimaryProcess ({Choice.left=current}  "+" right=PrimaryProcess)*
;

PrimaryProcess returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	"(" ProcessExpression ")" |
	AtomicProcess
;


AtomicProcess returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{Leaf} value="nil" |
	{Leaf} value="kill"|
	PredicateProcess |
	ActionProcess |
	ReferencedProcess 
;

PredicateProcess returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{PredicateProcess} predicate=Predicate ref=PrimaryProcess
;

ActionProcess returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{ActionProcess} action=Action ref=PrimaryProcess
;

ReferencedProcess returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
	{ReferencedProcess} name=[Process|UPPER]
;

//TERMS
Term hidden(ML_COMMENT,SL_COMMENT,WS):
	"(" processes=ReferencedProcess ",""{" stores+=Store ("," stores+=Store+)* "}" ")"";"
;

//TermProcessExpression returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
//	TermProcessParallel
//;
//
//TermProcessParallel returns ProcessExpression hidden(ML_COMMENT,SL_COMMENT,WS):
//	ReferencedProcess ({TPParallel.left=current}  "|" right=ReferencedProcess)*
//;

//BASETYPES

Double returns ecore::EDouble:
	 INT ('.' INT ( '^' ("-")? INT)?)?
;

Natural returns ecore::EInt:
	INT
;

Bool returns BooleanConstant:
	{BooleanConstant} ('True'|'False')
;

terminal LOWER: ("a".."z") ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
terminal UPPER: ("A".."Z") ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;